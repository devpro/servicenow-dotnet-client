#include:
#  - remote: "https://raw.githubusercontent.com/rabbids-incubator/gitlab-pipeline-definitions/feature/dotnet-templates/dotnet/ci.yml"

image: mcr.microsoft.com/dotnet/sdk:9.0

variables:
  BUILD_SOURCEBRANCHNAME: $CI_COMMIT_BRANCH
  BUILD_BUILDID: $CI_PIPELINE_ID
  ACCEPT_EULA: "Y"
  SA_PASSWORD: s0m3Str0ng!P@ssw0rd

stages:
  - build
  - test
  - deliver

services:
  # see: https://docs.microsoft.com/en-us/sql/linux/quickstart-install-connect-docker
  - name: mcr.microsoft.com/mssql/server:2019-latest
    alias: mssql

# avoid duplicate runs
# CI_PIPELINE_SOURCE=push|external_pull_request_event|schedule
workflow:
  rules:
    # - if: '$CI_PIPELINE_SOURCE == "external_pull_request_event"'
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "web"

#.dotnet_build:
build-dotnet:
  stage: build
  script:
    - dotnet restore
    - dotnet build --no-restore --configuration Debug

# for investigation only
# see: https://hub.docker.com/_/microsoft-mssql-tools
#db_init:
#  stage: build
#  image: mcr.microsoft.com/mssql-tools:latest
#  script:
#    - /opt/mssql-tools/bin/sqlcmd -S mssql -U SA -P $SA_PASSWORD -i $PWD/scripts/mssql/db-init.sql 2>&1

#.dotnet_test_sonar:
test-dotnet:
  stage: test
  variables:
    DOTNET_TEST_RESULT_XMLFILES: ./**/*test-result.xml
    DOTNET_TEST_COVERAGE_XMLFILES: ./test/*/TestResults/*/coverage.cobertura.xml
    DOTNET_TEST_REPORT_FOLDER: report
    Application__IsSecuredByAzureAd: "false"
    Application__IsOpenTelemetryEnabled: "true"
    OpenTelemetry__Service: SampleServiceNowRestClient
    OpenTelemetry__Metrics__Meter: SampleServiceNowRestClientMetrics
    OpenTelemetry__Tracing__Source: SampleServiceNowRestClientTracing
    OpenTelemetry__OtlpExporter__Endpoint: "http://localhost:4317"
    ServiceNow__RestApi__BaseUrl: "http://localhost:3000/api/now"
    ServiceNow__RestApi__Password: dummy
    ServiceNow__RestApi__Username: dummy
    ServiceNow__SqlServer__DataSource: mssql
    ServiceNow__SqlServer__InitialCatalog: TestDB
    ServiceNow__SqlServer__Password: $SA_PASSWORD
    ServiceNow__SqlServer__UserId: SA
  before_script:
    # updates system
    - apt-get update
    - apt-get install -y gnupg
    # installs sql server tools
    - curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add -
    - curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list | tee /etc/apt/sources.list.d/msprod.list
    - apt-get update
    - apt-get install -y mssql-tools unixodbc-dev
    # initializes a sql server database (schema + data)
    - /opt/mssql-tools/bin/sqlcmd -S mssql -U SA -P $SA_PASSWORD -i $PWD/scripts/mssql/db-init.sql
    # installs npm and mockoon-cli
    - apt-get install -y npm
    - npm install -g @mockoon/cli
    # starts api mocks
    - mockoon-cli start --data "$(pwd)/mocks/servicenow.json" --port 3000 &
    # installs java runtime, sonar scanner and report generator tool
    # - apt install -y default-jre
    # - dotnet tool install --global dotnet-sonarscanner
    - dotnet tool install --global dotnet-reportgenerator-globaltool
    # adds dotnet global tool in the path
    - export PATH="$PATH:/root/.dotnet/tools"
  script:
    # runs all tests with sonar analysis
    - dotnet restore
    # - dotnet sonarscanner begin /o:$SONAR_ORGANIZATION /k:$SONAR_PROJECTKEY /d:sonar.host.url=$SONAR_HOSTURL /d:sonar.cpd.exclusions=**/*Generated*.cs /d:sonar.coverageReportPaths=./sonarqubecoverage/SonarQube.xml
    - dotnet test --configuration Debug --logger:"junit;LogFilePath=..\..\artifacts\{assembly}-test-result.xml;MethodFormat=Class;FailureBodyFormat=Verbose" --collect:"XPlat Code Coverage"
    - reportgenerator "-reports:$DOTNET_TEST_COVERAGE_XMLFILES" -targetdir:$DOTNET_TEST_REPORT_FOLDER "-reporttypes:Cobertura;Html;TextSummary"
    - cat $DOTNET_TEST_REPORT_FOLDER/Summary.txt
    # - reportgenerator "-reports:$DOTNET_TEST_COVERAGE_XMLFILES" -targetdir:sonarqubecoverage -reporttypes:SonarQube
    # - dotnet sonarscanner end
  # after_script:
  #dependencies:
  #  - build
  artifacts:
    when: always
    paths:
      - $DOTNET_TEST_RESULT_XMLFILES
      - $DOTNET_TEST_COVERAGE_XMLFILES
      - $DOTNET_TEST_REPORT_FOLDER/Cobertura.xml
      - $DOTNET_TEST_REPORT_FOLDER/Summary.txt
    reports:
      junit:
        - $DOTNET_TEST_RESULT_XMLFILES
      coverage_report:
        coverage_format: cobertura
        # should also work and will prevent issue with line limit
        # path: $DOTNET_TEST_REPORT_FOLDER/Cobertura.xml
        path: $DOTNET_TEST_COVERAGE_XMLFILES
  coverage: '/Line coverage: \d+(?:\.\d+)?%/'
  only:
    - merge_requests
    - main
    - web

# ref. https://docs.microsoft.com/en-us/nuget/nuget-org/publish-a-package
#.dotnet_pack:
pack-dotnet:
  stage: deliver
  script:
    - dotnet restore
    - dotnet build --no-restore --configuration Release
    - dotnet pack --no-build --configuration Release -o output
    - ls -alrt output
    - for f in output/*.nupkg; do dotnet nuget push "$f" --api-key $NUGET_APIKEY --source https://api.nuget.org/v3/index.json ; done
  only:
    refs:
      - main
    changes:
      - Directory.Build.props
    variables:
      - $CI_PIPELINE_SOURCE == "push"

#build:
#  extends: .dotnet_build

#pack:
#  extends: .dotnet_pack

#test:
#  extends: .dotnet_test

include:
  # https://docs.gitlab.com/ee/user/application_security/dependency_scanning/  
  - template: Jobs/Dependency-Scanning.gitlab-ci.yml
  # https://docs.gitlab.com/ee/user/application_security/sast/
  - template: Jobs/SAST.gitlab-ci.yml
  # https://docs.gitlab.com/ee/user/application_security/secret_detection/pipeline/
  - template: Jobs/Secret-Detection.gitlab-ci.yml

sast:
  stage: test
