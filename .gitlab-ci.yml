#include:
#  - remote: "https://raw.githubusercontent.com/rabbids-incubator/gitlab-pipeline-definitions/feature/dotnet-templates/dotnet/ci.yml"

image: mcr.microsoft.com/dotnet/sdk:6.0

variables:
  ROOT_FOLDER: .
  BUILD_SOURCEBRANCHNAME: $CI_COMMIT_BRANCH
  BUILD_BUILDID: $CI_PIPELINE_ID

stages:
  - build
  - pack
  - test

# avoid duplicate runs
#workflow:
#  rules:
#    - if: '$CI_PIPELINE_SOURCE == "external_pull_request_event"'
#    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
#      when: never
#    - if: '$CI_COMMIT_BRANCH'

#.dotnet_build:
build:
  stage: build
  script:
    - echo CI_PIPELINE_SOURCE=$CI_PIPELINE_SOURCE
    - echo CI_COMMIT_BRANCH=$CI_COMMIT_BRANCH
    - env
    - env | grep CI
    - env | grep CI_EXTERNAL_PULL_REQUEST_
    - cd $ROOT_FOLDER
    - dotnet restore
    - dotnet build --no-restore --configuration Debug
  only:
    - external_pull_requests
    - main

#.dotnet_test_sonar:
test:
  stage: test
  variables:
    ServiceNow__RestApi__BaseUrl: $SERVICENOW_SANDBOX_URL
    ServiceNow__RestApi__Username: $SERVICENOW_SANDBOX_USERNAME
    ServiceNow__RestApi__Password: $SERVICENOW_SANDBOX_USERPWD
  script:
    - apt update
    - apt install -y default-jre
    - dotnet tool install --global dotnet-sonarscanner
    - dotnet tool install --global dotnet-reportgenerator-globaltool
    - export PATH="$PATH:/root/.dotnet/tools"
    - cd $ROOT_FOLDER
    - dotnet restore
    - dotnet sonarscanner begin /o:$SONAR_ORGANIZATION /k:$SONAR_PROJECTKEY /d:sonar.host.url=$SONAR_HOSTURL /d:sonar.cpd.exclusions=**/*Generated*.cs /d:sonar.coverageReportPaths="./sonarqubecoverage/SonarQube.xml"
    - dotnet build --no-restore --configuration Debug
    - dotnet test --no-build --configuration Debug --logger:"junit;LogFilePath=..\..\artifacts\{assembly}-test-result.xml;MethodFormat=Class;FailureBodyFormat=Verbose" --collect:"XPlat Code Coverage"
    - reportgenerator "-reports:./test/*/TestResults/*/coverage.cobertura.xml" "-targetdir:sonarqubecoverage" "-reporttypes:SonarQube"
    - dotnet sonarscanner end
  dependencies:
    - build
  artifacts:
    when: always
    paths:
      - ./**/*test-result.xml
    reports:
      junit:
        - ./**/*test-result.xml
      cobertura: ./test/*/TestResults/*/coverage.cobertura.xml
  only:
    - external_pull_requests
    - main

# ref. https://docs.microsoft.com/en-us/nuget/nuget-org/publish-a-package
#.dotnet_pack:
pack:
  stage: build
  script:
    - cd $ROOT_FOLDER
    - dotnet restore
    - dotnet build --no-restore --configuration Release
    - dotnet pack --no-build --configuration Release -o output
    - ls -alrt output
    - for f in output/*.nupkg; do dotnet nuget push "$f" --api-key $NUGET_APIKEY --source https://api.nuget.org/v3/index.json ; done
  only:
    - main

#build:
#  extends: .dotnet_build

#pack:
#  extends: .dotnet_pack

#test:
#  extends: .dotnet_test
